{"version":3,"sources":["webpack:///webpack/bootstrap 9e5bcf63a7d326f894f4","webpack:///./src/utility.ts","webpack:///./src/constants.ts","webpack:///./src/attribute-parser.ts","webpack:///./src/clean-parser.ts","webpack:///./src/index.ts","webpack:///./spec/in-browser/index.js","webpack:///./spec/unit .spec$","webpack:///./spec/unit/attribute-parser.spec.ts","webpack:///./spec/unit/clear-parser.spec.ts","webpack:///./src/html-parser.ts","webpack:///./spec/unit/html-parser.spec.ts","webpack:///./spec/unit/utility.spec.ts"],"names":[],"mappings":"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","file":"spec.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9e5bcf63a7d326f894f4","/**\n * Utility class\n * \n * @export\n * @class Utility\n */\nexport class Utility {\n\n  /**\n   * Remove all white space from text\n   * \n   * @param {string} text \n   * @returns \n   * @memberof Utility\n   */\n  public removeWhitespace(text: string) {\n    var tab = '\\u0009';\n    var noBreakSpace = '\\u00A0';\n    var newLine = '\\n';\n    var CR = '\\u000D';\n    var LF = '\\u000A';\n\n    text = text.trim();\n    text = text.split(' ').join(\"\");\n    text = text.split(tab).join(\"\");\n    text = text.split(noBreakSpace).join(\"\");\n    text = text.split(newLine).join(\"\");\n    text = text.split(CR).join(\"\");\n    text = text.split(LF).join(\"\");\n    return text;\n  }\n\n\n  /**\n   * Check if a character is whitespace\n   * \n   * @param {string} ch \n   * @returns {boolean} \n   * @memberof Utility\n   */\n  public isWhitespace(ch: string): boolean {\n    var tab = '\\u0009';\n    var noBreakSpace = '\\u00A0';\n    var newLine = '\\n';\n    var CR = '\\u000D';\n    var LF = '\\u000A';\n    return (ch === tab) || (ch === ' ') || (ch === noBreakSpace) \n      || (ch === newLine) || (ch === CR) || (ch === LF);\n  }\n\n\n  /**\n   * Determine if a string of text contains only whitespace characters\n   * \n   * @param {string} text \n   * @returns {boolean} \n   * @memberof Utility\n   */\n  public textOnlyContainsWhitespace(text: string) : boolean {\n    let isOnlyWhitespace = true;\n    if(!text) { return isOnlyWhitespace; }\n    for(let i = 0; i < text.length; i++) {\n      if(!this.isWhitespace(text[i])) {\n        isOnlyWhitespace = false;\n        break;\n      }\n    }\n    return isOnlyWhitespace;\n  }\n\n\n  /**\n   * Determine if a character is a letter\n   * \n   * @param {string} ch \n   * @returns {boolean} \n   * @memberof Utility\n   */\n  public isLetter(ch: string): boolean {\n    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');\n  }\n\n  /**\n   * Determine if the two characters are the start a html tag. HTML tags\n   * must start like <a <b \n   * \n   * @param {string} ch \n   * @param {string} nextCh \n   * @returns {boolean} \n   * @memberof Utility\n   */\n  public isStartOfTag(ch: string, nextCh: string): boolean {\n    if(!ch || !nextCh) { return false; }\n    return (ch === \"<\" && this.isLetter(nextCh));\n  }\n\n\n  /**\n   * Determine if the two characters are the end of a html tag./\n   * \n   * @param {string} ch \n   * @param {string} nextCh \n   * @returns {boolean} \n   * @memberof Utility\n   */\n  public isEndOfTag(ch: string, nextCh: string): boolean {\n    if(!ch || !nextCh) { return false; }\n    return (ch === \"<\" && nextCh === \"/\");\n  }\n\n\n  /**\n   * Determine if its the start of a html comment\n   * \n   * @param {string} text \n   * @returns {boolean} \n   * @memberof Utility\n   */\n  public isStartOfComment(text: string): boolean {\n    return (text.indexOf('<!--') === 0);\n  }\n}\n\n// export as singleton\nlet utility = new Utility();\nexport { utility };\n\n\n// WEBPACK FOOTER //\n// ./src/utility.ts","export const ELEMENT_TYPES = {\n  TAG: \"tag\",\n  TEXT: \"text\",\n  COMMENT: \"comment\"\n};\n\nexport const EMPTY_TAGS = {\n  \"area\": 1,\n  \"base\": 1,\n  \"basefont\": 1,\n  \"br\": 1,\n  \"col\": 1,\n  \"frame\": 1,\n  \"hr\": 1,\n  \"img\": 1,\n  \"input\": 1,\n  \"isindex\": 1,\n  \"link\": 1,\n  \"meta\": 1,\n  \"param\": 1,\n  \"embed\": 1\n};\n\nexport const MODE_TYPES = {\n  TEXT: 'text',\n  TAG: 'tag',\n  STYLE: 'style',\n  SCRIPT: 'script'\n};\n\nexport const TAG_TYPES = {\n  EMPTY: 'empty',\n  DEFAULT: 'default',\n  SCRIPT: 'script',\n  STYLE: 'style',\n  COMMENT: 'comment'\n};\n\nexport const QUOTE_TYPES = {\n  SINGLE: 1,\n  DOUBLE: 2\n};\n\n\n// WEBPACK FOOTER //\n// ./src/constants.ts","import { utility } from './utility';\n\nconst PARSER_MODES = {\n  READING_ATTR_NAME: 'reading-attr-name',\n  READING_ATTR_VALUE: 'reading-attr-value'\n};\n\n/**\n * Parse attributes in a html tag\n * \n * @export\n * @class AttributeParser\n */\nexport class AttributeParser {\n  \n  // the state when parsing\n  private state: any = {\n    text: '',\n    currentPos: 0,\n    mode: PARSER_MODES.READING_ATTR_NAME,\n    attrName: '',\n    attrValue: ''\n  };\n\n\n  /**\n   * Reset the parser\n   * \n   * @private\n   * @memberof AttributeParser\n   */\n  private reset() {\n    this.state = {\n      text: '',\n      currentPos: 0,\n      mode: 'reading-attr-name',\n      attrName: '',\n      attrValue: ''\n    };\n  }\n\n\n  /**\n   * Get the next character in the text string\n   * \n   * @private\n   * @returns {string} \n   * @memberof AttributeParser\n   */\n  private getNextChar(): string {\n    let ch = null;\n    if(this.state.currentPos < this.state.text.length) {\n      ch = this.state.text.charAt(this.state.currentPos);\n      this.state.currentPos++;\n    }\n    return ch;\n  }\n\n\n  /**\n   * Parse the text of attributes\n   * \n   * @private\n   * @param {string} text \n   * @returns {{ [key: string]: any }} \n   * @memberof AttributeParser\n   */\n  private _parse(text: string): { [key: string]: any } {\n    let attr = {};\n    this.state.text = text;\n    while(true) {\n      let ch = this.getNextChar();\n      if(ch === null) { \n        if(this.state.attrName) {\n          attr[this.state.attrName] = (this.state.attrValue)\n            ? this.state.attrValue : null;\n        }\n        break; \n      }\n      if(this.state.mode === PARSER_MODES.READING_ATTR_NAME) {\n        this.handleReadingAttrName(ch, attr);\n      } else if(this.state.mode === PARSER_MODES.READING_ATTR_VALUE) {\n        this.handleReadingAttrValue(ch, attr);\n      }\n    }\n    return attr;\n  }\n\n\n  /**\n   * Handle getting the next character when reading the attribute name\n   * \n   * @private\n   * @param {string} ch \n   * @param {any} attr \n   * @memberof AttributeParser\n   */\n  private handleReadingAttrName(ch: string, attr) {\n    if(ch === '=') {\n      // end of the attribute name\n      this.state.mode = PARSER_MODES.READING_ATTR_VALUE;\n    } else if(ch === '/') {\n      // not an attribute, probably just an end tag, like <input />\n      // do nothing\n    } else if(utility.isWhitespace(ch)) {\n      // possibily be an attribute without a value\n      if(this.state.attrName) {\n        attr[this.state.attrName] = null;\n        this.state.attrName = '';\n      }\n    } else {\n      this.state.attrName = this.state.attrName + ch;\n    }\n  }\n\n\n  /**\n   * Handle getting the next character when reading the attribute value\n   * \n   * @private\n   * @param {string} ch \n   * @param {any} attr \n   * @memberof AttributeParser\n   */\n  private handleReadingAttrValue(ch: string, attr) {\n    if(utility.isWhitespace(ch)) {\n      let firstCh = this.state.attrValue[0];\n      let lastCh = this.state.attrValue[this.state.attrValue.length - 1];\n      if((firstCh === \"'\" || firstCh === '\"') && firstCh !== lastCh) {\n        // we must be dealing with a whitespace in a string, something like\n        // class=\"one two\"\n        this.state.attrValue = this.state.attrValue + ch;\n      } else {\n        attr[this.state.attrName] = this.state.attrValue;\n        this.state.mode = PARSER_MODES.READING_ATTR_NAME;\n        this.state.attrName = '';\n        this.state.attrValue = '';\n      }\n    } else {\n      this.state.attrValue = this.state.attrValue + ch;\n    }\n  }\n\n\n  /**\n   * Parse a html tag for attributes\n   * \n   * @param {string} tag \n   * @returns \n   * @memberof AttributeParser\n   */\n  public parse(tag: string) {\n    this.reset();\n    let attr = {};\n    let posOfFirstSpace = tag.indexOf(\" \");\n    let posOfGreaterThan = tag.lastIndexOf(\">\");\n    if(posOfFirstSpace > -1 && posOfFirstSpace < posOfGreaterThan) {\n      // we possibiliy have attributes\n      let text = tag.substring(posOfFirstSpace, posOfGreaterThan);\n      text = text.trim();\n      attr = this._parse(text);\n    }\n    return attr;\n  }\n\n\n  /**\n   * Reverse the output of the parse function back to a string of attributes\n   * \n   * @param {{ [key: string]: any}} attributes \n   * @returns {string} \n   * @memberof AttributeParser\n   */\n  public reverse(attributes: { [key: string]: any}): string {\n    let textAttr = '';\n    for(let key in attributes) {\n      if(attributes[key] === null) {\n        textAttr += ' ' + key;\n      } else {\n        textAttr += ' ' + key + '=' + attributes[key];\n      }\n    }\n    return textAttr.trim();\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/attribute-parser.ts","import { iHtmlElement, iCleanOptions } from './interfaces';\nimport { ELEMENT_TYPES, TAG_TYPES } from './constants';\nimport { utility } from './utility';\n\n/**\n * Clean up the array of node elements returned from the HtmlParser.parse()\n * function\n * \n * @export\n * @class CleanParser\n */\nexport class CleanParser {\n  private removeEmptyTags;\n  private removeEmptyTextNodes;\n\n\n  /**\n   * Set the options for the parser\n   * \n   * @private\n   * @param {iCleanOptions} options \n   * @memberof CleanParser\n   */\n  private setOptions(options: iCleanOptions) {\n    options = options || {};\n    this.removeEmptyTags = (typeof options.removeEmptyTags !== 'undefined')\n      ? options.removeEmptyTags : true;\n    this.removeEmptyTextNodes = \n      (typeof options.removeEmptyTextNodes !== 'undefined')\n      ? options.removeEmptyTextNodes : true;\n  }\n\n\n  /**\n   * Remove text nodes that only contain whitespace\n   * \n   * @private\n   * @param {number} index \n   * @param {iHtmlElement[]} nodes \n   * @returns {void} \n   * @memberof CleanParser\n   */\n  private parseAndRemoveEmptyText(index: number, nodes: iHtmlElement[]): void {\n    if(index >= nodes.length) {\n      return;\n    }\n    let node = nodes[index];\n    if(node.type === ELEMENT_TYPES.TEXT \n    && utility.textOnlyContainsWhitespace(node.data)) {\n      nodes.splice(index, 1);\n      index--;\n    } else if(node.type === ELEMENT_TYPES.TAG && node.children\n    && node.children.length > 0) {\n      this.parseAndRemoveEmptyText(0, node.children);\n    }\n    this.parseAndRemoveEmptyText(++index, nodes);\n  }\n\n\n  /**\n   * Remove tag elements that are empty\n   * \n   * @private\n   * @param {number} index \n   * @param {iHtmlElement[]} nodes \n   * @returns {void} \n   * @memberof CleanParser\n   */\n  private parseAndRemoveEmptyTags(index: number, nodes: iHtmlElement[]): void {\n    if(index >= nodes.length) {\n      return;\n    }\n    let node = nodes[index];\n    if(node.type === ELEMENT_TYPES.TAG) {\n      if(node.children && node.children.length > 0) {\n        this.parseAndRemoveEmptyTags(0, node.children);\n      } \n      let noChildern = (!node.children || node.children.length <= 0);\n      if(node.tagType === TAG_TYPES.DEFAULT && noChildern) {\n        nodes.splice(index, 1);\n        index--;\n      }\n    }\n    this.parseAndRemoveEmptyTags(++index, nodes);\n  }\n\n\n  /**\n   * Parse html element nodes to clean and remove unwanted tags\n   * \n   * @param {iHtmlElement[]} htmlNodes \n   * @param {iCleanOptions} [options] \n   * @returns {iHtmlElement[]} \n   * @memberof CleanParser\n   */\n  parse(htmlNodes: iHtmlElement[], options?: iCleanOptions): iHtmlElement[] {\n    this.setOptions(options);\n    if(this.removeEmptyTextNodes) {\n      this.parseAndRemoveEmptyText(0, htmlNodes);\n    }\n    if(this.removeEmptyTags) {\n      this.parseAndRemoveEmptyTags(0, htmlNodes);\n    }\n    return htmlNodes;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clean-parser.ts","export { ELEMENT_TYPES, TAG_TYPES } from './constants';\nexport { iHtmlElement, iCleanOptions } from './interfaces';\nexport { HtmlParser } from './html-parser';\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","\n// Our webpack.unit.tests.config.js file uses this to require all unit test files\n// so they can be tested in a browser for debugging\n\n// require all test files\nvar testsContext = require.context('../unit', true, /.spec$/);\ntestsContext.keys().forEach(testsContext);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./spec/in-browser/index.js\n// module id = 5\n// module chunks = 0","var map = {\n\t\"./attribute-parser.spec\": 7,\n\t\"./clear-parser.spec\": 8,\n\t\"./html-parser.spec\": 10,\n\t\"./utility.spec\": 11\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 6;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./spec/unit .spec$\n// module id = 6\n// module chunks = 0","import { AttributeParser } from '../../src/attribute-parser';\n\n/**\n * Attribute parser\n */\ndescribe('Attribute parser', () => {\n  let attrParser = new AttributeParser();\n\n  /**\n   * parse()\n   */\n  describe('parse()', () => {\n    it('should parse attributes with double quotes', () => {\n      let tag = '<p class=\"class-one\" custom-attr=\"one two\" txt=\"\\'one\\'\">';\n      let expectedResult = {\"class\":\"\\\"class-one\\\"\",\"custom-attr\":\"\\\"one two\\\"\",\"txt\":\"\\\"'one'\\\"\"};\n      let output = attrParser.parse(tag);\n      expect(JSON.stringify(output)).toEqual(JSON.stringify(expectedResult));\n    });\n\n    it('should work with single quotes', () => {\n      let tag = \"<span class='cls' cus-attr='one two'>\";\n      let expectedResult = {\"class\":\"'cls'\",\"cus-attr\":\"'one two'\"};\n      let output = attrParser.parse(tag);\n      expect(JSON.stringify(output)).toEqual(JSON.stringify(expectedResult));\n    });\n\n    it('should handle values with no quotes', () => {\n      let tag = \"<div show=true hide=false>\";\n      let expectedResult = {\"show\":\"true\",\"hide\":\"false\"};\n      let output = attrParser.parse(tag);\n      expect(JSON.stringify(output)).toEqual(JSON.stringify(expectedResult));\n    });\n\n    it('should work with attributes with no values', () => {\n      let tag = \"<input required cus='one' />\";\n      let expectedResult = {\"required\":null,\"cus\":\"'one'\"};\n      let output = attrParser.parse(tag);\n      expect(JSON.stringify(output)).toEqual(JSON.stringify(expectedResult));\n    });\n\n    it('should handle no attributes', () => {\n      let tag = \"<div>\";\n      let output = attrParser.parse(tag);\n      expect(JSON.stringify(output)).toEqual(\"{}\");\n      tag = \"<br/>\";\n      output = attrParser.parse(tag);\n      expect(JSON.stringify(output)).toEqual(\"{}\");\n      tag = \"<br />\";\n      output = attrParser.parse(tag);\n      expect(JSON.stringify(output)).toEqual(\"{}\");\n    });\n\n    it('should parse complex attributes', () => {\n      let attrParser = new AttributeParser();\n      let tag = \"<p class='abc db' aria-label=\\\"Easy one two\\\" custom=\\\"'text'\\\" val='' required custom-again=true abc-d='1'>\";\n      let expectedResult = {\"class\":\"'abc db'\",\"aria-label\":\"\\\"Easy one two\\\"\",\"custom\":\"\\\"'text'\\\"\",\"val\":\"''\",\"required\":null,\"custom-again\":\"true\",\"abc-d\":\"'1'\"};\n      let output = attrParser.parse(tag);\n      expect(JSON.stringify(output)).toEqual(JSON.stringify(expectedResult));\n    });\n\n    it('should parse attributes over different lines', () => {\n      let tag = `<p class=\"hi\"\n        custom='123' required \n        cust=true >`;\n      let expectedResult = {\"class\":\"\\\"hi\\\"\",\"custom\":\"'123'\",\"required\":null,\"cust\":\"true\"};\n      let output = attrParser.parse(tag);\n      expect(JSON.stringify(output)).toEqual(JSON.stringify(expectedResult));\n    });\n\n    it('should parse attributes with greater than symbol in attribute text', () => {\n      let tag = \"<img alt='5>6' custom='d<f' />\";\n      let output = attrParser.parse(tag);\n      let expectedResult = {\"alt\":\"'5>6'\",\"custom\":\"'d<f'\"};\n      expect(JSON.stringify(output)).toEqual(JSON.stringify(expectedResult));\n    });\n  });\n\n\n\n  /**\n   * reverse()\n   */\n  describe('reverse()', () => {\n    it('should reverse attributes object returned from parse function', () => {\n      let tag = \"<p class='one two' required custom=\\\"hi\\\">\";\n      let expectedResult = \"class='one two' required custom=\\\"hi\\\"\";\n      let output = attrParser.parse(tag);\n      let textAttr = attrParser.reverse(output);\n      expect(textAttr).toEqual(expectedResult);\n    });\n  });\n});\n\n\n// WEBPACK FOOTER //\n// ./spec/unit/attribute-parser.spec.ts","import { CleanParser } from '../../src/clean-parser';\nimport { HtmlParser } from '../../src';\nimport { iCleanOptions } from '../../src/interfaces';\n\n/**\n * CleanParser service\n */\ndescribe('CleanParser', () => {\n  let htmlParser = new HtmlParser();\n  let cleanParser = new CleanParser();\n\n\n  /**\n   * parse()\n   */\n  describe('parse()', () => {\n    it('should remove empty tags (basic)', () => {\n      let html = \"<div>hi <div><span></span></div></div>\";\n      let output = htmlParser.parse(html);\n      output = cleanParser.parse(output, {\n        removeEmptyTextNodes: false\n      });\n      let expectedResult = \"<div>hi </div>\";\n      expect(htmlParser.reverse(output)).toEqual(expectedResult);\n    });\n\n    it('should remove empty tags', () => {\n      let html = \"<div>hi <span></span> there, <br /> how are you<p></p></div>\";\n      let output = htmlParser.parse(html);\n      output = cleanParser.parse(output, {\n        removeEmptyTextNodes: false\n      });\n      let expectedResult = \"<div>hi  there, <br /> how are you</div>\";\n      expect(htmlParser.reverse(output)).toEqual(expectedResult);\n    });\n\n    it('should remove empty text nodes', () => {\n      let html = \"<div><span></span>hi<span> </span> </div>\";\n      let output = htmlParser.parse(html);\n      output = cleanParser.parse(output, {\n        removeEmptyTags: false\n      });\n      let expectedResult = \"<div><span></span>hi<span></span></div>\";\n      expect(htmlParser.reverse(output)).toEqual(expectedResult);\n    });\n  });\n});\n\n\n// WEBPACK FOOTER //\n// ./spec/unit/clear-parser.spec.ts","import { utility } from './utility';\nimport {\n  ELEMENT_TYPES,\n  EMPTY_TAGS,\n  MODE_TYPES,\n  TAG_TYPES,\n  QUOTE_TYPES\n} from './constants';\nimport { \n  iHtmlElement, \n  iSearchTagResult, \n  iState, \n  iCleanOptions \n} from './interfaces';\nimport { AttributeParser } from './attribute-parser';\nimport { CleanParser } from './clean-parser';\n\n\n/**\n * Parse html string into an array of json objects that represent html elements\n * \n * @export\n * @class HtmlParser\n */\nexport class HtmlParser {\n\n  // the state when parsing\n  private state: iState;\n  private errorCb: (err: Error) => void = null;\n  private addNodeCb: (nodeBeingAdded: iHtmlElement, \n    parentElement: iHtmlElement) => void = null;\n  private stringifyNodeCb: (node: iHtmlElement) => void = null;\n  \n\n  /**\n   * Reset the parser\n   * \n   * @private\n   * @memberof HtmlParser\n   */\n  private reset() {\n    this.state = {\n      mode: MODE_TYPES.TEXT,\n      html: '',\n      currentPos: 0,\n      output: []\n    };\n  }\n\n\n  /**\n   * Add a html node element to our output object\n   * \n   * @private\n   * @param {iHtmlElement} newNode \n   * @param {iHtmlElement} currentElement \n   * @memberof HtmlParser\n   */\n  private addNodeElement(newNode: iHtmlElement, currentElement: iHtmlElement) {\n    if(this.addNodeCb) {\n      this.addNodeCb(newNode, currentElement);\n    }\n    if(currentElement) {\n      if(!currentElement.children) { currentElement.children = []; }\n      currentElement.children.push(newNode);\n    } else {\n      this.state.output.push(newNode);\n    }\n  }\n\n\n  /**\n   * Create a text node\n   * \n   * @private\n   * @param {string} text \n   * @returns {iHtmlElement} \n   * @memberof HtmlParser\n   */\n  private createTextNode(text: string): iHtmlElement {\n    return {\n      type: ELEMENT_TYPES.TEXT,\n      data: text\n    };\n  }\n\n\n  /**\n   * Create a comment node\n   * \n   * @private\n   * @param {string} comment \n   * @returns {iHtmlElement} \n   * @memberof HtmlParser\n   */\n  private createCommentNode(comment: string): iHtmlElement {\n    return {\n      type: ELEMENT_TYPES.COMMENT,\n      data: comment\n    };\n  }\n\n\n  /**\n   * Create a tag node\n   * \n   * @private\n   * @param {string} tag \n   * @returns {iHtmlElement} \n   * @memberof HtmlParser\n   */\n  private createTagNode(tag: string): iHtmlElement {\n    let posOfFirstSpace = tag.indexOf(\" \");\n    let posOfGreaterThan = tag.indexOf(\">\");\n    let endIndex = (posOfFirstSpace > -1 && posOfFirstSpace < posOfGreaterThan)\n      ? posOfFirstSpace : posOfGreaterThan;\n    let name = tag.substring(1, endIndex);\n    name = utility.removeWhitespace(name);\n    return {\n      type: ELEMENT_TYPES.TAG,\n      tagType: this.getTagType(name),\n      name: name,\n      attributes: this.parseAttributes(tag),\n      children: [] \n    };\n  }\n\n\n  /**\n   * Get the type of tag\n   * \n   * @private\n   * @param {string} name \n   * @returns {string} \n   * @memberof HtmlParser\n   */\n  private getTagType(name: string): string {\n    name = name.toLowerCase();\n    if(EMPTY_TAGS[name]) {\n      return TAG_TYPES.EMPTY;\n    } else if(name === TAG_TYPES.STYLE) {\n      return TAG_TYPES.STYLE;\n    } else if(name === TAG_TYPES.SCRIPT) {\n      return TAG_TYPES.SCRIPT;\n    } else if(name === TAG_TYPES.COMMENT) {\n      return TAG_TYPES.COMMENT;\n    }\n    return TAG_TYPES.DEFAULT;\n  }\n\n\n  /**\n   * Get the next tag from a text string, it could be a start or end tag\n   * \n   * @private\n   * @param {string} text \n   * @returns {iSearchTagResult} \n   * @memberof HtmlParser\n   */\n  private getNextTag(text: string): iSearchTagResult {\n    let pos = 0;\n    while(pos < text.length) {\n      if(utility.isStartOfTag(text[pos], text[pos + 1])) {\n        return {\n          type: 'start',\n          pos: pos \n        };\n      } else if(utility.isEndOfTag(text[pos], text[pos + 1])) {\n        return {\n          type: 'end',\n          pos: pos\n        }\n      } else if(utility.isStartOfComment(text.substr(pos))) {\n        return {\n          type: 'comment',\n          pos: pos\n        }\n      }\n      pos++;\n    }\n    return { type: 'no-tag' };\n  }\n\n\n  /**\n   * Parse for text\n   * \n   * @private\n   * @param {iHtmlElement} currentElement \n   * @memberof HtmlParser\n   */\n  private parseText(currentElement: iHtmlElement) {\n    let nextText = this.state.html.substring(this.state.currentPos);\n    let tagResult = this.getNextTag(nextText);\n    if(tagResult.type === 'start') {\n      this.handleStartTagInText(tagResult, nextText, currentElement);\n    } else if(tagResult.type === 'end') {\n      this.handleEndTagInText(tagResult, nextText, currentElement);\n    } else if(tagResult.type === 'comment') {\n      this.handleCommentInText(tagResult, nextText, currentElement);\n    }else {\n      // no tag found\n      if(nextText.length > 0) {\n        let textNode = this.createTextNode(nextText);\n        this.addNodeElement(textNode, currentElement);\n      }\n    }\n  }\n\n\n  /**\n   * Handle finding the start tag of a html element\n   * \n   * @private\n   * @param {iSearchTagResult} tagResult \n   * @param {string} nextText \n   * @param {iHtmlElement} currentElement \n   * @memberof HtmlParser\n   */\n  private handleStartTagInText(tagResult: iSearchTagResult, \n  nextText: string, currentElement: iHtmlElement): void {\n    if(tagResult.pos > 0) {\n      // there must be text before our html start tag\n      let text = nextText.substring(0, tagResult.pos);\n      let textNode = this.createTextNode(text);\n      this.addNodeElement(textNode, currentElement);\n    }\n    // need to now parse the html tag\n    this.state.mode = MODE_TYPES.TAG;\n    this.state.currentPos = this.state.currentPos + tagResult.pos;\n    this._parse(currentElement);\n  }\n\n\n  /**\n   * Handing finding the end tag of a html element\n   * \n   * @private\n   * @param {iSearchTagResult} tagResult \n   * @param {string} nextText \n   * @param {iHtmlElement} currentElement \n   * @memberof HtmlParser\n   */\n  private handleEndTagInText(tagResult: iSearchTagResult, \n  nextText: string, currentElement: iHtmlElement): void {\n    if(tagResult.pos > 0) {\n      // there must be text before our html end tag\n      let text = nextText.substring(0, tagResult.pos);\n      let textNode = this.createTextNode(text);\n      this.addNodeElement(textNode, currentElement);\n    }\n    // validate the end tag is correct\n    let posEndTag = nextText.indexOf('>', tagResult.pos) + 1;\n    let tagText = nextText.substring(tagResult.pos, posEndTag);\n    let tagName = tagText.replace(\"</\", \"\").replace(\">\", \"\");\n    if(!currentElement) {\n      let err = new Error('No start tag for end tag: ' + tagName);\n      if(this.errorCb) { this.errorCb(err); }\n    }\n    if(currentElement.name.toLowerCase() !== tagName.toLowerCase()) {\n      let err = Error('Start tag (' + currentElement.name + ') and end tag '\n      + '(' + tagName + ') do not match');\n      if(this.errorCb) { this.errorCb(err); }\n    }\n    this.state.mode = MODE_TYPES.TEXT;\n    this.state.currentPos = this.state.currentPos + posEndTag;\n    let parentElement = currentElement.parentElement;\n    delete currentElement.parentElement;\n    this._parse(parentElement);\n  }\n\n\n  /**\n   * Handle finding a comment in text\n   * \n   * @private\n   * @param {iSearchTagResult} tagResult \n   * @param {string} nextText \n   * @param {iHtmlElement} currentElement \n   * @memberof HtmlParser\n   */\n  private handleCommentInText(tagResult: iSearchTagResult, \n  nextText: string, currentElement: iHtmlElement) {\n    if(tagResult.pos > 0) {\n      // there must be text before our html end tag\n      let text = nextText.substring(0, tagResult.pos);\n      let textNode = this.createTextNode(text);\n      this.addNodeElement(textNode, currentElement);\n    }\n    let posEndCommentTag = nextText.indexOf('-->');\n    if(!posEndCommentTag) {\n      let err = new Error('Comment does not have an end tag');\n      if(this.errorCb) { this.errorCb(err); }\n    }\n    let commentText = nextText.substring(tagResult.pos + 4, posEndCommentTag);\n    let commentNode = this.createCommentNode(commentText);\n    this.addNodeElement(commentNode, currentElement);\n    this.state.mode = MODE_TYPES.TEXT;\n    this.state.currentPos = this.state.currentPos + (posEndCommentTag + 3);\n    this._parse(currentElement);\n  }\n\n\n  /**\n   * Parse a tag\n   * \n   * @private\n   * @param {iHtmlElement} currentElement \n   * @memberof HtmlParser\n   */\n  private parseTag(currentElement: iHtmlElement) {\n    let nextText = this.state.html.substring(this.state.currentPos);\n    let posEndTag = this.findPositionOfClosingTag(nextText) + 1;\n    let tagText = nextText.substring(0, posEndTag);\n    let tagNode = this.createTagNode(tagText);\n    // move to the end of our start tag\n    this.state.currentPos = this.state.currentPos + posEndTag;\n    this.addNodeElement(tagNode, currentElement);\n    this.state.mode = MODE_TYPES.TEXT;\n    if(tagNode.tagType === TAG_TYPES.EMPTY) {\n      // empty tags can not have children\n      this._parse(currentElement);\n    } else if(tagNode.tagType === TAG_TYPES.STYLE) {\n      this.state.mode = MODE_TYPES.STYLE;\n      tagNode.parentElement = currentElement;\n      this._parse(tagNode);\n    } else if(tagNode.tagType === TAG_TYPES.SCRIPT) {\n      this.state.mode = MODE_TYPES.SCRIPT;\n      tagNode.parentElement = currentElement;\n      this._parse(tagNode);\n    } else {\n      tagNode.parentElement = currentElement;\n      this._parse(tagNode);\n    }\n  }\n\n\n  /**\n   * Find the position of the greater than symbol for a html tag element. \n   * \n   * @private\n   * @param {string} text \n   * @returns \n   * @memberof HtmlParser\n   */\n  private findPositionOfClosingTag(text: string) {\n    let posOfFirstSpace = text.indexOf(\" \");\n    let pos = (posOfFirstSpace > -1) ? posOfFirstSpace + 1 : 0;\n    let posOfGreaterThan = text.indexOf(\">\");\n    if(posOfGreaterThan < pos) {\n      return posOfGreaterThan;\n    }\n    let quoteType = null;\n    let insideQuote = false;\n    while(true) {\n      let ch = (pos < text.length) ? text[pos] : null;\n      if(ch === '>' && !insideQuote) {\n        return pos;\n      } else if(ch === \"'\") {\n        if(insideQuote && quoteType === QUOTE_TYPES.SINGLE) {\n          insideQuote = false;\n        } else if(!insideQuote) {\n          insideQuote = true;\n          quoteType = QUOTE_TYPES.SINGLE;\n        }\n      } else if(ch === '\"') {\n        if(insideQuote && quoteType === QUOTE_TYPES.DOUBLE) {\n          insideQuote = false;\n        } else if(!insideQuote) {\n          insideQuote = true;\n          quoteType = QUOTE_TYPES.DOUBLE;\n        }\n      } else if(ch === null) {\n        // if we get here, the html must be really bad\n        break;\n      }\n      pos++;\n    }\n    return text.length - 1;\n  }\n\n\n  /**\n   * Parse for attributes in a html tag\n   * \n   * @private\n   * @param {string} tag \n   * @returns {{ [key: string]: any }} \n   * @memberof HtmlParser\n   */\n  private parseAttributes(tag: string): { [key: string]: any } {\n    let attrParser = new AttributeParser();\n    return attrParser.parse(tag);\n  }\n\n\n  /**\n   * Parse a script tag like: <script> or <style>\n   * \n   * @private\n   * @param {iHtmlElement} currentElement \n   * @param {string} endTag \n   * @memberof HtmlParser\n   */\n  private parseScript(currentElement: iHtmlElement, endTag: string) {\n    let nextText = this.state.html.substring(this.state.currentPos);\n    let posOfEndTag = nextText.indexOf(endTag);\n    if(posOfEndTag < 0) {\n      let err = new Error('Script (' + currentElement.name + ' ) does not have ' +\n      'an end tag');\n      if(this.errorCb) { this.errorCb(err); }\n    }\n    let scriptContent = nextText.substring(0, posOfEndTag);\n    let textNode = this.createTextNode(scriptContent);\n    this.addNodeElement(textNode, currentElement);\n    this.state.currentPos = this.state.currentPos \n      + (posOfEndTag + endTag.length);\n    this.state.mode = MODE_TYPES.TEXT;\n    let parentElement = currentElement.parentElement;\n    delete currentElement.parentElement;\n    this._parse(parentElement);\n  }\n\n\n  /**\n   * Keep parsing the html string\n   * \n   * @private\n   * @param {iHtmlElement} currentElement \n   * @memberof HtmlParser\n   */\n  private _parse(currentElement: iHtmlElement) {\n    switch(this.state.mode) {\n      case MODE_TYPES.TEXT:\n        this.parseText(currentElement);\n        break;\n      case MODE_TYPES.TAG:\n        this.parseTag(currentElement);\n        break;\n      case MODE_TYPES.STYLE:\n        this.parseScript(currentElement, \"</style>\");\n        break;\n      case MODE_TYPES.SCRIPT:\n        this.parseScript(currentElement, \"</script>\");\n        break;\n    }\n  }\n\n\n  /**\n   * Parse a html string\n   * \n   * @param {string} html \n   * @param {Function} cb\n   * @returns {iHtmlElement []} \n   * @memberof HtmlParser\n   */\n  public parse(html: string, errorCb?: (err: Error) => void,\n  addNodeCb?: (nodeBeingAdded: iHtmlElement, parentElement: iHtmlElement) => void)\n  : iHtmlElement [] {\n    this.errorCb = (errorCb) ? errorCb : null;\n    this.addNodeCb = (addNodeCb) ? addNodeCb : null;\n    this.reset();\n    this.state.html = html;\n    this._parse(null);\n    return this.state.output;\n  }\n\n\n  /**\n   * Reverse the output from the parse function back to html string\n   * \n   * @param {iHtmlElement[]} htmlNodes \n   * @returns {string} \n   * @memberof HtmlParser\n   */\n  public reverse(htmlNodes: iHtmlElement[], \n  stringifyNodeCb?: (node: iHtmlElement) => void): string {\n    this.stringifyNodeCb = (stringifyNodeCb) ? stringifyNodeCb : null;\n    return this.reverseNodes(0, htmlNodes, '');\n  }\n\n\n  /**\n   * Reverse an array of html element nodes into a html string\n   * \n   * @private\n   * @param {number} index \n   * @param {iHtmlElement[]} htmlNodes \n   * @param {string} html \n   * @returns \n   * @memberof HtmlParser\n   */\n  private reverseNodes(index: number, htmlNodes: iHtmlElement[], html: string) {\n    if(index >= htmlNodes.length) {\n      return html;\n    }\n    let node = htmlNodes[index];\n    if(this.stringifyNodeCb) { this.stringifyNodeCb(node); }\n    if(node.type === ELEMENT_TYPES.TEXT) {\n      html += node.data;\n    } else if(node.type === ELEMENT_TYPES.COMMENT) {\n      html += '<!--' + node.data + '-->';\n    } else {\n      let attrParser = new AttributeParser();\n      let textAttr = attrParser.reverse(node.attributes);\n      textAttr = (textAttr.length > 0) ? ' ' + textAttr : textAttr;\n      // tag type\n      if(node.tagType === TAG_TYPES.EMPTY) {\n        html += '<' + node.name + textAttr + ' />';\n      } else {\n        html += '<' + node.name + textAttr + '>';\n        if(node.children && node.children.length > 0) {\n          let newHtml = this.reverseNodes(0, node.children, '');\n          html += newHtml;\n        }\n        html += '</' + node.name + '>';\n      }\n    }\n    index++;\n    return this.reverseNodes(index, htmlNodes, html);\n  }\n\n\n  /**\n   * Parse html element nodes to clean and remove unwanted tags\n   * \n   * @param {iHtmlElement[]} nodes \n   * @param {iCleanOptions} options \n   * @returns {iHtmlElement[]} \n   * @memberof HtmlParser\n   */\n  public clean(nodes: iHtmlElement[], options?: iCleanOptions): iHtmlElement[] {\n    let cleanParser = new CleanParser();\n    return cleanParser.parse(nodes, options);\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/html-parser.ts","import {\n  HtmlParser,\n  ELEMENT_TYPES,\n  iHtmlElement\n} from '../../src';\n\n/**\n * HtmlParser\n */\ndescribe('HtmlParser', () => {\n  let htmlParser = new HtmlParser();\n\n  /**\n   * parse()\n   */\n  describe('parse()', () => {\n    // plain text\n    it('should parse plain text', () => {\n      let html = \"plain text \";\n      let expectedResult = [{\"type\":\"text\",\"data\":\"plain text \"}];\n      let output = htmlParser.parse(html);\n      expect(JSON.stringify(output)).toEqual(JSON.stringify(expectedResult));\n    });\n\n    // plain text with tag\n    it('should parse plain text with tag', () => {\n      let html = \"plain text <br />\";\n      let expectedResult = [{\"type\":\"text\",\"data\":\"plain text \"},{\"type\":\"tag\",\"tagType\":\"empty\",\"name\":\"br\",\"attributes\":{},\"children\":[]}];\n      let output = htmlParser.parse(html);\n      expect(JSON.stringify(output)).toEqual(JSON.stringify(expectedResult));\n    });\n\n    // html comment\n    it('should handle html comment', () => {\n      let html = \"<div><!--This is not seen-->Hello world!</div>\";\n      let expectedResult = [{\"type\":\"tag\",\"tagType\":\"default\",\"name\":\"div\",\"attributes\":{},\"children\":[{\"type\":\"comment\",\"data\":\"This is not seen\"},{\"type\":\"text\",\"data\":\"Hello world!\"}]}];\n      let output = htmlParser.parse(html);\n      expect(JSON.stringify(output)).toEqual(JSON.stringify(expectedResult));\n    });\n\n    // script tag\n    it('should parse script tag', () => {\n      let html = \"<body><script type=\\\"javascript/text\\\">var a = ( 5 > 2) ? 3 : 3;</script></body>\";\n      let output = htmlParser.parse(html);\n      let expectedResult = [{\"type\":\"tag\",\"tagType\":\"default\",\"name\":\"body\",\"attributes\":{},\"children\":[{\"type\":\"tag\",\"tagType\":\"script\",\"name\":\"script\",\"attributes\":{\"type\":\"\\\"javascript/text\\\"\"},\"children\":[{\"type\":\"text\",\"data\":\"var a = ( 5 > 2) ? 3 : 3;\"}]}]}];\n      expect(JSON.stringify(output)).toEqual(JSON.stringify(expectedResult));\n    });\n\n    // style tag\n    it('should parse style tag', () => {\n      let html = \"<body><style>body > p {}</style></body>\";\n      let output = htmlParser.parse(html);\n      let expectedResult = [{\"type\":\"tag\",\"tagType\":\"default\",\"name\":\"body\",\"attributes\":{},\"children\":[{\"type\":\"tag\",\"tagType\":\"style\",\"name\":\"style\",\"attributes\":{},\"children\":[{\"type\":\"text\",\"data\":\"body > p {}\"}]}]}];\n      expect(JSON.stringify(output)).toEqual(JSON.stringify(expectedResult));\n    });\n\n    // nested tags\n    it('should parse nested tags', () => {\n      let html = \"<div><div><p> hi<span> there</span></p></div></div>\";\n      let output = htmlParser.parse(html);\n      let expectedResult = [{\"type\":\"tag\",\"tagType\":\"default\",\"name\":\"div\",\"attributes\":{},\"children\":[{\"type\":\"tag\",\"tagType\":\"default\",\"name\":\"div\",\"attributes\":{},\"children\":[{\"type\":\"tag\",\"tagType\":\"default\",\"name\":\"p\",\"attributes\":{},\"children\":[{\"type\":\"text\",\"data\":\" hi\"},{\"type\":\"tag\",\"tagType\":\"default\",\"name\":\"span\",\"attributes\":{},\"children\":[{\"type\":\"text\",\"data\":\" there\"}]}]}]}]}];\n      expect(JSON.stringify(output)).toEqual(JSON.stringify(expectedResult));\n    });\n\n    // tags with attributes\n    it('should parse tags with attributes', () => {\n      let html = \"<div class='one'><input required /></div>\";\n      let output = htmlParser.parse(html);\n      let expectedResult = [{\"type\":\"tag\",\"tagType\":\"default\",\"name\":\"div\",\"attributes\":{\"class\":\"'one'\"},\"children\":[{\"type\":\"tag\",\"tagType\":\"empty\",\"name\":\"input\",\"attributes\":{\"required\":null},\"children\":[]}]}];\n      expect(JSON.stringify(output)).toEqual(JSON.stringify(expectedResult));\n    });\n\n    // invliad html\n    it('should pass error for invalid html', () => {\n      let html = \"<div><p>hi</div>\";\n      let errorCalled = 0;\n      let output = htmlParser.parse(html, (err) => {\n        errorCalled++;\n      });\n      expect(errorCalled).toBeGreaterThan(0);\n    });\n\n    // tags in capital letter\n    it('should parse tags with capital letters', () => {\n      let html = \"<SPAN><p>hi</P> there</SPAN>\";\n      let expectedResult = [{\"type\":\"tag\",\"tagType\":\"default\",\"name\":\"SPAN\",\"attributes\":{},\"children\":[{\"type\":\"tag\",\"tagType\":\"default\",\"name\":\"p\",\"attributes\":{},\"children\":[{\"type\":\"text\",\"data\":\"hi\"}]},{\"type\":\"text\",\"data\":\" there\"}]}];\n      let output = htmlParser.parse(html);\n      expect(JSON.stringify(output)).toEqual(JSON.stringify(expectedResult));\n    });\n\n    // custom tags, like: <cust-tag>Hello</cust-tag>\n    it('should parse custom tags', () => {\n      let html = \"<cust-tag>hello</cust-tag>\";\n      let output = htmlParser.parse(html);\n      let expectedResult = [{\"type\":\"tag\",\"tagType\":\"default\",\"name\":\"cust-tag\",\"attributes\":{},\"children\":[{\"type\":\"text\",\"data\":\"hello\"}]}];\n      expect(JSON.stringify(output)).toEqual(JSON.stringify(expectedResult));\n    });\n\n    // text with < or > signs in it, like: <p> 5 > 3 </p>\n    it('should parse text content that has less than or greater than symbols', () => {\n      let html = \"<p> 5 > 3 and 2 < 4 </p>\";\n      let expectedResult = [{\"type\":\"tag\",\"tagType\":\"default\",\"name\":\"p\",\"attributes\":{},\"children\":[{\"type\":\"text\",\"data\":\" 5 > 3 and 2 < 4 \"}]}];\n      let output = htmlParser.parse(html);\n      expect(JSON.stringify(output)).toEqual(JSON.stringify(expectedResult));\n    });\n\n    // handle greater or less than symbols in attribute values\n    it('should handle greater than symbol in attribute', () => {\n      let html = \"<img alt='5>6' custom='d<f' /><span class=d>f>hi</span>\";\n      let output = htmlParser.parse(html);\n      let expectedResult = [{\"type\":\"tag\",\"tagType\":\"empty\",\"name\":\"img\",\"attributes\":{\"alt\":\"'5>6'\",\"custom\":\"'d<f'\"},\"children\":[]},{\"type\":\"tag\",\"tagType\":\"default\",\"name\":\"span\",\"attributes\":{\"class\":\"d\"},\"children\":[{\"type\":\"text\",\"data\":\"f>hi\"}]}];\n      expect(JSON.stringify(output)).toEqual(JSON.stringify(expectedResult));\n    });\n\n    // TODO: fix parser to handle this\n    it('should handle quotes in attributes', () => {\n      let html = \"<p custom=\\\"This's there ' s\\\"><span tag='\\\"hi there\\\"'></span></p>\";\n      let output = htmlParser.parse(html);\n      let expectedResult = [{\"type\":\"tag\",\"tagType\":\"default\",\"name\":\"p\",\"attributes\":{\"custom\":\"\\\"This's there ' s\\\"\"},\"children\":[{\"type\":\"tag\",\"tagType\":\"default\",\"name\":\"span\",\"attributes\":{\"tag\":\"'\\\"hi there\\\"'\"},\"children\":[]}]}];\n      expect(JSON.stringify(output)).toEqual(JSON.stringify(expectedResult));\n    });\n\n\n    it('should parse tag split over lines', () => {\n      let html = `hi\n<p\n  class=\"one\">\n  a paragraph\n</p>`;\n      let expectedResult = [{\"type\":\"text\",\"data\":\"hi\\n\"},{\"type\":\"tag\",\"tagType\":\"default\",\"name\":\"p\",\"attributes\":{\"class\":\"\\\"one\\\"\"},\"children\":[{\"type\":\"text\",\"data\":\"\\n  a paragraph\\n\"}]}];\n      let output = htmlParser.parse(html);\n      expect(JSON.stringify(output)).toEqual(JSON.stringify(expectedResult));\n    });\n\n\n    it('should fire event each time a node is added', () => {\n      let html = \"<p class='one'>My <span>name is <strong>Nathan</strong></span></p>\";\n      let cnt = 0;\n      let output = htmlParser.parse(html, null, (node, parentNode) => {\n        cnt++;\n      });\n      expect(cnt).toEqual(6);\n    });\n  });\n\n\n\n\n  /**\n   * reverse()\n   */\n  describe('reverse()', () => {\n    it('should reverse output from the parse function back into html', () => {\n      let html = \"<div class='one'><p>hi <span>there</span></p><br /></div>\";\n      let output = htmlParser.parse(html);\n      let reversedHtml = htmlParser.reverse(output);\n      expect(reversedHtml).toEqual(html);\n    });\n\n    it('should fire event each time a node is stringified', () => {\n      let html = \"<p class='one'>My <span>name is <strong>Nathan</strong></span></p>\";\n      let output = htmlParser.parse(html);\n      let newHtml = htmlParser.reverse(output, (node) => {\n        if(node.name === 'p') {\n          node.attributes['class'] = \"'onne'\";\n        }\n      });\n      expect(newHtml).toEqual(\"<p class='onne'>My <span>name is <strong>Nathan</strong></span></p>\");\n    });\n  });\n\n\n\n  /**\n   * clean()\n   */\n  describe('clean()', () => {\n    it('should clean and remove unwanted html', () => {\n      let html = \"<div>\\n<p>\\n</p><p> Hello</p>\\n <div><span></span>\\n</div>\\n<div>hi <br><span></span>\\n</div><div><p><span> </span></p></div></div>\";\n      let output = htmlParser.parse(html);\n      output = htmlParser.clean(output);\n      let expectedResult = \"<div><p> Hello</p><div>hi <br /></div></div>\";\n      expect(htmlParser.reverse(output)).toEqual(expectedResult);\n    });\n  });\n});\n\n\n// WEBPACK FOOTER //\n// ./spec/unit/html-parser.spec.ts","import { utility } from '../../src/utility';\n/**\n * Utility\n */\ndescribe('Utility', () => {\n  /**\n   * removeWhitespace()\n   */\n  describe('removeWhitespace()', () => {\n    it('should remove all white space', () => {\n      let text = utility.removeWhitespace(\" nathan\\n\");\n      expect(text).toEqual(\"nathan\");\n      text = utility.removeWhitespace(\" \\u000D\\u000Anathan\\n\");\n      expect(text).toEqual(\"nathan\");\n      text = utility.removeWhitespace(\" \\u000D\\u000Anat han\\n\");\n      expect(text).toEqual(\"nathan\");\n    });\n  });\n});\n\n\n// WEBPACK FOOTER //\n// ./spec/unit/utility.spec.ts"],"sourceRoot":""}